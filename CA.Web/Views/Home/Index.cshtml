@{
    ViewBag.Title = "Home Page";
}

@section Scripts{
    <script type="text/javascript">

        ko.bindingHandlers.jqSlider = {
            init: function (element, valueAccessor, allBindingsAccessor) {
                //initialize the control
                var options = allBindingsAccessor().jqOptions || {};
                $(element).slider(options);

                //handle the value changing in the UI
                ko.utils.registerEventHandler(element, "slide", function () {
                    //would need to do some more work here, if you want to bind against non-observables
                    var observable = valueAccessor();
                    observable($(element).slider("value"));
                });

            },
            //handle the model value changing
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                $(element).slider("value", value);
            }
        };

        var paper;
        var viewingAngle = .12;
        var design;

        var Tier = function (width, height, color) {
            var self = this;
            self.width = ko.observable(width);
            self.height = ko.observable(height);
            self.color = ko.observable(color);

            self.width.subscribe(drawDesign);
            self.height.subscribe(drawDesign);
            self.color.subscribe(drawDesign);
        };

        var Design = function () {
            var self = this;
            self.tiers = ko.observableArray([new Tier(14, 6, '#fff')]);
            self.selectedTierIndex = ko.observable(0);
            self.selectedTier = ko.computed(function () {
                if (self.selectedTierIndex() == -1)
                    return null;
                return self.tiers()[self.selectedTierIndex()];
            });
            self.selectTier = function (tier) {
                self.selectedTierIndex(ko.utils.arrayIndexOf(self.tiers(), tier));
            };
            self.height = function () {
                var designHeight = 0;
                $.each(self.tiers(), function () { designHeight += this.height() });
                return designHeight;
            };
            self.width = function () {
                var designWidth = 0;
                $.each(self.tiers(), function () { if (this.width() > designWidth) { designWidth = this.width(); } });
                return designWidth;
            };
            self.firstTier = function () {
                if (self.tiers().length == 0) 
                    return null;
                return self.tiers()[0];
            };
            self.lastTier = function () {
                if (self.tiers().length ==0)
                    return null;
                return self.tiers()[self.tiers().length - 1];
            };
            self.addTier = function () {
                var height = self.selectedTier().height();
                var width = self.selectedTier().width();
                var color = self.selectedTier().color();
                self.tiers.push(new Tier(width, height, color));
                self.selectedTierIndex(self.tiers().length - 1);
                drawDesign();
            };
        };


        $(function () {
            paper = new Raphael(document.getElementById('canvas_container'), 500, 500);
            setCanvasSize();
            design = new Design();
            ko.applyBindings(design);
            drawDesign();

            $(window).resize(function () {
                setCanvasSize();
                drawDesign();
            });

            $('#colorSelector').jPicker({
                window: {
                    expandable: true,
                    position: {
                        x: 'screenCenter',
                        y: '10'
                    }
                },
                images :
                {
                    clientPath: '@Url.Content("~/Images/jPicker/")' // Path to image files
                },
                color: {
                    active: new $.jPicker.Color({ hex: '#ffffff' })
                }
            },
            function (color, context) {
                var all = color.val('all');
                design.selectedTier().color(all && '#' + all.hex || '#fff');
                drawDesign();
            },
            function (color, context) {
                var hex = color.val('hex');
                design.selectedTier().color(hex && '#' + hex || '#fff');
                drawDesign();
            },
            function (color, context) {
               // nothing.
            });
            
            $('.tabs').tabs({
                collapsible: true
            });

            $('.sortable').sortable({
                items: "li:not(.locked)"
            });
            $(".sortable li").disableSelection();
        });

        function setCanvasSize() {
            var win = $(window);
            var canvas = $('#canvas_container');
            var toolboxWidth = 300;
            var heightPad = 15;
            var width = win.width() - toolboxWidth;
            var height = win.height() - heightPad;
            canvas.height(height);
            canvas.width(width);
            paper.setSize(width, height);
        };


        function drawDesign() {
            paper.clear();
            if (design.tiers().length == 0)
                return;

            var designHeight = design.height();
            var designWidth = design.width();
            var paperHeight = paper.height;
            var paperWidth = paper.width;

            // Adjust design height for faux 3D perspective (circle-top+bottom tier have 3d pad, box ? just top?)
            var design3DPad = design.firstTier().width() * viewingAngle;
            design3DPad += design.lastTier().width() * viewingAngle;

            // Padding
            var paddingPct = .05;
            var paperVerticalPad = paperHeight * paddingPct;
            var paperHorizontalPad = paperWidth * paddingPct;

            // Optimal fit
            var heightRatio = (paperHeight - 2 * paperVerticalPad) / (designHeight + design3DPad);
            var widthRatio = (paperWidth - 2 * paperHorizontalPad) / designWidth;
            var unitsPerInch = Math.min(heightRatio, widthRatio);

            // Center design
            var midHeight = paperHeight / 2;
            var midWidth = paperWidth / 2;

            var startY = midHeight - ((designHeight * unitsPerInch) / 2);

            var consumedHeight = 0;
            design.tiers().forEach(function (t) {
                var computedHeight = t.height() * unitsPerInch;
                var computedWidth = t.width() * unitsPerInch;
                var x = midWidth - (computedWidth / 2);
                var y = startY + (designHeight * unitsPerInch) - computedHeight - consumedHeight;
                drawCylinder(x, y, computedWidth, computedHeight, t.color());

                consumedHeight += computedHeight;
            });
        }

        function drawCylinder(x, y, width, height, color) {
            var path = "M" + x + "," + y;
            path += "l" + width + "," + "0";
            path += "l" + "0" + "," + height;
            path += "a" + -width / 2 + "," + width * viewingAngle + "," +
                    "0" + "," +
                    "0" + "," + "1" + "," +
                    -width + "," + "0";
            path += "l" + "0" + "," + "-" + height;

            var cakeCenter = paper.path(path);
            var cakeTop = paper.ellipse(x + width / 2, y, width / 2, width * viewingAngle);
            var tier = paper.set();
            tier.push(cakeTop, cakeCenter).attr({
                "fill": color
            });
        }
    </script>
}
<div id="canvasContainer">
    <div id="canvas_container" style="width: 600px; height: 600px;"></div>
</div>
<div id="commands">
    <div class="tabs">
        <ul>
            <li><a href="#tabs-1">Tiers</a></li>
        </ul>
        <div id="tabs-1">
           <ul id="tiers" class="sortable">
                <!-- ko foreach: tiers -->
                    <li class="ui-state-default" data-bind="click: $root.selectTier">
                        <div>Tier <span data-bind="text: $index()+1"></span></div>
                        <div>Width: <span data-bind="text: width"></span> Inches</div>
                    </li>
                <!-- /ko -->
                <li class="ui-state-default locked" data-bind="click: addTier"><div id="addTier">Add another tier</div></li>
            </ul>
        </div>
    </div>
    <div id="properties" class="tabs">
        <ul>
            <li><a href="#property-tabs-1">Properties</a></li>
        </ul>
        <div id="property-tabs-1">
            <div>
                <div>Width: <label data-bind="text: selectedTier().width()"></label> Inches</div>
                <div data-bind='jqSlider: selectedTier().width, jqOptions: { min: 6, max: 18, step: 2 }'></div>
            </div>
            <div>
                <div>Height: <label data-bind="text: selectedTier().height()"></label> Inches</div>
                <div data-bind='jqSlider: selectedTier().height, jqOptions: { min: 2, max: 12, step: 1 }'></div>
            </div>
            <div>
                <span>Color</span>
                <div id="colorSelector"></div>
            </div>
        </div>
    </div>
</div>
<div class="clear"></div>
